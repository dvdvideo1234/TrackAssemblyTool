local DSC = E2Helper.Descriptions
DSC["trackasmlibApplyPhysicalAnchor(e:ennnn)"] = "Anchors the track entity to a base entity with weld 0/1 and no-collide 0/1 no-collide-world 0/1 and force limit."
DSC["trackasmlibApplyPhysicalSettings(e:nnns)"] = "Modifies track entity physical settings with phys-gun enabled, freeze, gravity toggle and surface material behavior"
DSC["trackasmlibAttachAdditions(e:)"] = "Attaches the track entity additions when available"
DSC["trackasmlibAttachBodyGroups(e:s)"] = "Attaches track piece body-groups by providing selection code"
DSC["trackasmlibGenActivePointDSV(e:essns)"] = "Exports the track entity as external database record"
DSC["trackasmlibGenActivePointINS(e:essns)"] = "Exports the track entity as internal database record"
DSC["trackasmlibGetBodyGroups(e:)"] = "Returns the track bodygoup selection list"
DSC["trackasmlibGetSkin(e:)"] = "Returns the track skin selection list"
DSC["trackasmlibGetAdditionsCount(e:)"] = "Returns record additions count by entity"
DSC["trackasmlibGetAdditionsCount(s)"] = "Returns record additions count by model"
DSC["trackasmlibGetAdditionsLine(e:n)"] = "Returns record additions line by entity"
DSC["trackasmlibGetAdditionsLine(sn)"] = "Returns record additions line by model"
DSC["trackasmlibGetName(e:)"] = "Returns record name by entity"
DSC["trackasmlibGetName(s)"] = "Returns record name by model"
DSC["trackasmlibGetOffset(e:ns)"] = "Returns record snap offsets by entity"
DSC["trackasmlibGetOffset(sns)"] = "Returns record snap offsets by model"
DSC["trackasmlibGetPointsCount(e:)"] = "Returns record points count by entity"
DSC["trackasmlibGetPointsCount(s)"] = "Returns record points count by model"
DSC["trackasmlibGetProperty()"] = "Returns the surface property types"
DSC["trackasmlibGetProperty(s)"] = "Returns the surface properties available for a given type"
DSC["trackasmlibGetType(e:)"] = "Returns record track type by entity"
DSC["trackasmlibGetType(s)"] = "Returns record track type by model"
DSC["trackasmlibHasAdditions(e:)"] = "Returns 1 when the record has additions and 0 otherwise by entity"
DSC["trackasmlibHasAdditions(s)"] = "Returns 1 when the record has additions and 0 otherwise by model"
DSC["trackasmlibIsPiece(e:)"] = "Returns 1 when the record is actual track and 0 otherwise by entity"
DSC["trackasmlibIsPiece(s)"] = "Returns 1 when the record is actual track and 0 otherwise by model"
DSC["trackasmlibMakePiece(e:va)"] = "Duplicates the given track using the new position and angle"
DSC["trackasmlibMakePiece(svansnnnn)"] = "Creates new track piece with position angle, mass, skin code and color by model"
DSC["trackasmlibSnapEntity(e:vsnnnnva)"] = "Returns track entity snap position and angle array by holder model, point ID, active radius, flatten, ignore type, position offset and angle offset"
DSC["trackasmlibSnapNormal(vasnva)"] = "Returns track surface snap position and angle array by position, angle, model, point ID, position offset and angle offset"
DSC["trackasmlibMakePiece(e:van)"] = "Creates new track piece with position angle, mass by entity"
DSC["trackasmlibMakePiece(e:vans)"] = "Creates new track piece with position angle, mass and skin code by entity"
DSC["trackasmlibMakePiece(e:vansnnnn)"] = "Creates new track piece with position angle, mass, skin code and color by entity"
DSC["trackasmlibMakePiece(e:vansv)"] = "Creates new track piece with position angle, mass, skin code and color as numbers by entity"
DSC["trackasmlibMakePiece(svan)"] = "Creates new track piece with position angle, mass by model"
DSC["trackasmlibMakePiece(svans)"] = "Creates new track piece with position angle, mass and skin code by model"
DSC["trackasmlibMakePiece(svansv)"] = "Creates new track piece with position angle, mass, skin code and color as numbers by model"
