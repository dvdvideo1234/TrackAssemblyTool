@name TA Exporter Generator
@inputs
@outputs [Dev Chip Base]:entity [F Cen Prg]:vector Time Test PU PD
@persist Time DF StraightUp Interval TrackPieceW TrackRangerMaxW TrackPieceH TrackRangerMaxH TrackOriginInset
@persist [Cen Prg ORG MOrigin F R U]:vector [Prop Mod]:string [Dev Chip Base]:entity ARC:array OutagePercentTolerance
@persist PointID TrackOriginTolerance:string TrackJumpBackMultiplier MExtraDepth MExtraSide TrackStepDelta
@persist OverrideZ [InsertTypeDB TypeSegment PieceType PieceName]:string PrintCount PrintTime
@trigger none

interval(20)

function number isOuter(Lft, Rgh, Percent, MaxRange)
{
    Rez = 0
    T  = abs(Lft-Rgh)
    Pd = ((Percent / 100) * MaxRange)
    Pu = MaxRange - Pd
    if(T   > Pd){ Rez = 1 }
    if(Lft > Pu){ Rez = 1 }
    if(Rgh > Pu){ Rez = 1 }
   # print("isOuter "+Rez+" ["+round(T,2)+">"+round(Pd)+"] "+round(Lft,2)+">"+round(Pu)+"  "+round(Rgh,2)+">"+round(Pu,2))
    return Rez
}

function array clampTrace(Pos:vector,Width,Fwd:vector,Rgh:vector,Len,Holo1,Holo2)
{
    AL = Pos - Width * Rgh
    AR = Pos + Width * Rgh
    ARL = rangerOffset(Len,AL,  Rgh):distance()
    ARR = rangerOffset(Len,AR, -Rgh):distance()
    if(Holo1 > 0){ holoPos(Holo1,AL), holoAng(Holo1,Fwd:toAngle( Rgh)) }
    if(Holo2 > 0){ holoPos(Holo2,AR), holoAng(Holo2,Fwd:toAngle(-Rgh)) }
    ADRL = ((ARR - ARL) / 2)
    ADDW = ((Len - ARR - ARL) / 2)
    return array(ARR,ARL,ADRL,ADDW)
}

function void printPoint(Type:string, Name:string, Mode:string, Hash:string, Point:number, Org:vector, Ang:angle, OverZ)
{
    # Change storage mode
    PID  = toString(floor(abs(Point)))

    Ang = round(Ang,2)
    Org = round(Org,5)

    if(OverZ != 0)
    {
        Org = Org:setZ(OverZ)
    }

    StrAng = toString(Ang):replace("[",""):replace("]","")
    StrOrg = toString(Org):replace("[",""):replace("]","")

    if(Ang:pitch() == 0 && Ang:yaw() == 0 && Ang:roll() == 0)
    {
        StrAng = ""
    }

    if(Org:x() == 0 && Org:y() == 0 && Org:z() == 0)
    {
        StrOrg = ""
    }

    StrCls = entity():isConstrainedTo(1):type()
    if(StrCls == "prop_physics"){ StrCls = "" }

    StrPnt = ""

    if(Mode == "DSV")
    {
        Del = "\t"
        Ins = "TRACKASSEMBLY_PIECES"+
            Del+Hash+
            Del+"\""+Type+"\""+
            Del+"\""+Name+"\""+
            Del+PID+
            Del+"\""+StrPnt+"\""+
            Del+"\""+StrOrg+"\""+
            Del+"\""+StrAng+"\""+
            Del+"\""+StrCls+"\""
    }
    elseif(Mode == "INS")
    {
        Del  = ", "
        Ins = "  PIECES:Record({"+
            "\""+Hash+"\""+Del+
            "\""+Type+"\""+Del+
            "\""+Name+"\""+Del+
            PID+Del+
            "\""+StrPnt+"\""+Del+
            "\""+StrOrg+"\""+Del+
            "\""+StrAng+"\""+Del+
            "\""+StrCls+"\""+"})"
    }
    print(_HUD_PRINTTALK,Ins)

}

if(first() || dupefinished())
{
    # What model to search for vector offset
    Prop = "models/sprops/cuboids/non_set/cube_18x18x18.mdl"

    # Piece type that you are using. It is mandatory
    # It is usually derived from the addon mame
    # that you are exporting
    PieceType = "#"

    # Piece name that you are using. This is actually
    # how the track piece will be called in the TA panel
    # Put a hastag to be autogenerated from the model on import
    PieceName = "#"

    # Point ID to be exported
    # Set this to 0 to use direct point generation based on the model given
    # Set this to <>0 to use point generation via iterative binary search
    # Set this to positive to make the algorithm trace forward
    # Set this to negative to make the algorithm trace backwards
    PointID = 1

    # What segment type are we processing
    # road     --> Roads ( PHX roads )
    # monorail --> PHX monorail
    # general  --> The two beam tracks segmentnts that we all love and joy
    TypeSegment = "road"

    # Set this to <>0 for direct Z local offset
    # This us used to override the Z axis magntude
    OverrideZ = 5.65723

    # What mode will the point be exportet as
    InsertTypeDB = "INS"

    # Outage % Defines how sensitive the algorithm is
    # Lesser number means more sensitive
    OutagePercentTolerance = 1

    # Prints the delta if this many switches were made
    # The higher the number it will wait more before it prints
    PrintCount = 100

    # This is automatically managed by the point ID selected
    # Set the coefficient to adjust the process speed
    # The higher the number the less iterations are made
    TrackStepDelta = 0.02

    # Track piece width and height
    # The bigger the numbers the more cross section your track piece has
    TrackPieceW = 800
    TrackPieceH = 60

    # Generate the origin with an inset
    # This is used for bad model ends where the program cannot start sometimes
    # Keep this to the minimum if your tracks are quite good and you want accuracy
    TrackOriginInset = 0.001

    # Tolerance of the error gained when generating an active point
    # This translates to 10 to the power of negative something..
    # The higher the power the less error algorithm has
    TrackOriginTolerance = "e-12"

    # Must be positive and slaller than two for the binery search to work
    # Defines how far does the sensor origin goes back anfter it goes out of bounds
    # The higher the mumber the long time it will take and will be more accurate
    TrackJumpBackMultiplier = 1.7

    # Automatic value adjustment
    Interval = (PointID == 0) * 10
    TrackRangerMaxW = TrackPieceW * 2
    TrackRangerMaxH = TrackPieceH * 2
    PrintCount = abs(PrintCount)
    PrintTime  = PrintCount
    TrackStepDelta = abs(TrackStepDelta)
    DF = clamp(TrackStepDelta, 0.0001, 1) * sign(PointID)
    TrackJumpBackMultiplier = clamp(TrackJumpBackMultiplier, 1.001, 1.999)

    # Initialization
    Time = 0
    Chip = entity()
    CPos = Chip:pos()
    CAng = Chip:angles()
    F = sign(DF) * Chip:forward()
    U = Chip:up()
    R = F:cross(U)
    Base = Chip:isConstrainedTo("weld")
    Mod  = Base:model()
    No   = findByModel(Prop)
    Dev  = findClosest(Chip:pos())
    Dev:setColor(0,255,0,255)
    # Set to > 0 for straight rails and place it between the beams
    # The angle must be [0,0,0]
    UpVec = Dev:pos() - CPos
    StraightUp = UpVec:dot(U)
    if(abs(StraightUp) > TrackPieceH)
    {
        ALR = clampTrace(CPos,TrackPieceH,F,U,TrackRangerMaxH,0,0), CR = ALR[1,number], CL = ALR[2,number]
        StraightUp = -(abs(TrackRangerMaxH - abs(CR + CL)) / 2)        
        # If it's too deep can be adjusted manually
        # StraightUp = -2
    }
    DF = abs(DF)
    Interval = abs(Interval)

    if(Interval > 0)
    {
        A = Base:toLocal(Dev:angles())        
        O = Base:toLocalAxis(Dev:pos() - Base:pos())
        printPoint(PieceType,PieceName,InsertTypeDB,Mod,PointID,O,A,OverrideZ)
        Time = Interval
    }

    if(StraightUp != 0 && Interval == 0)
    {
        holoCreate(1,CPos, 0.1*vec(1,1,1))
        holoCreate(2,CPos, 0.1*vec(1,1,1))
        holoCreate(3,CPos, 0.3*vec(1,1,1))
        holoCreate(4,CPos, 0.3*vec(1,1,1))
        holoCreate(5,CPos, 0.3*vec(1,1,1))
        holoCreate(6,CPos, 0.3*vec(1,1,1))
        holoCreate(7,CPos, 0.3*vec(1,1,1))
        holoCreate(8,CPos, 0.3*vec(1,1,1))

        Time = 0
        Pos = Base:pos()
        Cen = CPos + StraightUp * U
        VRL = clampTrace(Cen,TrackPieceW,F,R,TrackRangerMaxW,3,4)
        Cen = Cen - VRL[3,number] * R
        Prg = (CPos - Cen):dot(R) * R

        PosL = Cen - TrackPieceW * R
        PosR = Cen + TrackPieceW * R
        PosU = CPos + TrackPieceH * U
        PosD = CPos - TrackPieceH * U

        ARC = clampTrace(Cen,TrackPieceH,F,U,TrackRangerMaxH,7,8)

        holoPos(1,Cen) holoColor(1,vec(255,0,0))
        holoPos(2,Cen + (TrackOriginInset * F)) holoColor(2,vec(255,255,0))
        holoPos(3,PosL) holoColor(3,vec(0,255,0)) holoAng(3,F:toAngle( R)) holoModel(3,"cone")
        holoPos(4,PosR) holoColor(4,vec(0,0,255)) holoAng(4,F:toAngle(-R)) holoModel(4,"cone")
        holoPos(5,PosU) holoColor(5,vec(255,0,255)) holoAng(5,F:toAngle( -U)) holoModel(5,"cone")
        holoPos(6,PosD) holoColor(6,vec(255,0,255)) holoAng(6,F:toAngle(  U)) holoModel(6,"cone")
        holoPos(7,PosU) holoColor(7,vec(255,0,255)) holoAng(7,F:toAngle( -U)) holoModel(7,"cone")
        holoPos(8,PosD) holoColor(8,vec(255,0,255)) holoAng(8,F:toAngle(  U)) holoModel(8,"cone")

        print("Rail beam height inset [Offset/glu] " + toString(StraightUp))
    }
}

if(Interval > 0)
{
    if(Time <= 0)
    {
        print(_HUD_PRINTTALK,"Finished: "+Prop)
        Dev:setColor(255,255,255,255)
        selfDestruct()
    }
    else
    {
        Time = Time - 1
    }
}elseif(StraightUp != 0 && Interval == 0){
    PosL = Cen - TrackPieceW * R
    PosR = Cen + TrackPieceW * R

    VRL = clampTrace(Cen,TrackPieceW,F,R,TrackRangerMaxW,0,0)
    VR  = VRL[1,number] , VL  = VRL[2,number], VDM = VRL[3,number]

    VDP = clampTrace(Cen + Prg - TrackOriginInset * F,TrackPieceH,F,U,TrackRangerMaxH,5,6)
    PU = VDP[1,number], PD = VDP[2,number], PDW = VDP[4,number]

    VDC = clampTrace(Cen,TrackPieceH,F,U,TrackRangerMaxH,7,8)

    # print(VDC[1,number],PU, ARC[1,number])

    if((VDC[1,number] < ARC[1,number]) && (VDC[2,number] < ARC[2,number]))
    {
        ARC = VDC
    }

    if(PrintCount != 0){
        PrintTime = PrintTime - 1
    }

    if(isOuter(VL,VR,OutagePercentTolerance,TrackRangerMaxW))
    {
        Time = 10
        Dev:setColor(255,255,255,255)
        while(isOuter(VL,VR,OutagePercentTolerance,TrackRangerMaxW) && (Time > 0))
        {
          Cen = Cen - DF * F
          ALR = clampTrace(Cen,TrackPieceW,F,R,TrackRangerMaxW,0,0), VL = ALR[1,number], VR = ALR[2,number]
          Time = Time - 1
          DF = DF * TrackJumpBackMultiplier
        }
        DF =  0.5 * DF
        if(PrintTime == 0 && PrintCount != 0)
        {
            print(_HUD_PRINTTALK,"Delta: "+toString(DF)+" Time: "+toString(Time))
            PrintTime = PrintCount
        }
    }else{
        holoPos(1,Cen) holoColor(1,vec(0,255,255))
        # BEGIN Defintition formulas

        if(TypeSegment == "road"){
            PRL = clampTrace(Cen - TrackOriginInset * F ,TrackPieceW,F,R,TrackRangerMaxW,3,4)
            TrackExtraDepth = ((ARC[1,number] - PU) / 2) + PU
            TrackExtraSide  = PRL[3,number]
        }elseif(TypeSegment == "monorail"){
            PRL = clampTrace(Cen - TrackOriginInset * F ,TrackPieceW,F,R,TrackRangerMaxW,3,4)
            TrackExtraDepth = ARC[1,number] + ARC[4,number]
            TrackExtraSide  = PRL[3,number]
        }elseif(TypeSegment == "general"){
            PRL = clampTrace(Cen - TrackOriginInset * F ,0,F,R,TrackRangerMaxW,3,4)
            TrackExtraDepth = ((ARC[1,number] - PU) / 2) + PU
            TrackExtraSide  = PRL[3,number]
        }
        else
        {
            print(_HUD_PRINTTALK,"Segment type missing error: " + TypeSegment)
            selfDestruct()
        }

        ORG = Cen + TrackPieceH      * U
        ORG = ORG - TrackExtraSide   * R
        ORG = ORG - TrackExtraDepth  * U
        ORG = ORG - TrackOriginInset * F

        O = Base:toLocalAxis(ORG - Base:pos())
        A = Base:toLocal((F):toAngle(U))
        S = toString(DF):find(TrackOriginTolerance)
        
        # print(_HUD_PRINTTALK,"Origin: "+toString(O), (MOrigin - O):length())
        
        if(MOrigin:length() > 0 && (MOrigin - O):length() > 1)
        {
            print(_HUD_PRINTTALK,"Tollerance error: "+toString((MOrigin - O):length()))
            print(_HUD_PRINTTALK,"Extra side : "+toString(MExtraSide)+" > "+toString(TrackExtraSide))
            print(_HUD_PRINTTALK,"Extra depth: "+toString(MExtraDepth)+" > "+toString(TrackExtraDepth))
            print(_HUD_PRINTTALK,"Extra inset: "+toString(TrackOriginInset))
            selfDestruct()
        }
        
        if(DF > 1)
        {
            print(_HUD_PRINTTALK,"Origin delta error: "+toString(DF))
            print(_HUD_PRINTTALK,"Extra side : "+toString(TrackExtraSide))
            print(_HUD_PRINTTALK,"Extra depth: "+toString(TrackExtraDepth))
            print(_HUD_PRINTTALK,"Extra inset: "+toString(TrackOriginInset))
            selfDestruct()
        }
                    
        if(S > 0)
        {    
            print(_HUD_PRINTTALK,"Finish: "+toString(DF))
            printPoint(PieceType,PieceName,InsertTypeDB,Mod,PointID,O+TrackOriginInset*F,A,OverrideZ)
            selfDestruct()
        }
        else
        {
            if(PrintTime == 0 && PrintCount != 0)
            {
                print(_HUD_PRINTTALK,"Delta: "+toString(DF))
                PrintTime = PrintCount
            }  
        }
        
        holoPos(2,Base:pos() + O:rotate(Base:angles()))
        Cen = Cen + DF * F
        
        # Memory crap
        MOrigin     = O
        MExtraDepth = TrackExtraDepth
        MExtraSide  = TrackExtraSide
    }
}
