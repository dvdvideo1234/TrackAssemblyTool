@name TA Exporter Scan Generator
@model models/hunter/blocks/cube025x025x025.mdl
@trigger none
@persist PieceW, PieceH, PointID
@persist [U R F P]:vector [A]:angle X Y DX DY
@persist [ArrXU ArrXD ArrYL ArrYR ArrM]:array
@persist [Rail Chip]:entity RangerHit InsDistance
@persist [PieceType, PieceName, TypeSegment, PieceMode]:string

# These are for storing the minimums and maximums
# ArrXU ArrXD ArrYL ArrYR
# One array has these inside it: Arr = [Now, Min, Max]

function void getTrace(TrArr:array, TrFw:vector, TrUp:vector, TrPos:vector, TrLen, TrHolo)
{
    if(TrHolo > 0){ holoPos(TrHolo, TrPos), holoAng(TrHolo, TrFw:toAngle(TrUp)) }
    TrRan = rangerOffset(TrLen,TrPos,TrFw)
    if(TrRan:hit())
    {
      TrArr[1,number] = TrRan:distance()
      if(TrArr[1,number] < TrArr[2,number]){ TrArr[1,number] = TrArr[2,number] }
      if(TrArr[1,number] > TrArr[3,number]){ TrArr[1,number] = TrArr[3,number] }
    }
}

function void printPoint(PrType:string, PrName:string, PrMode:string, PrHash:string, PrPID:number, PrOrg:vector, PrAng:angle)
{
    PrAng  = round(PrAng,2)
    PrOrg  = round(PrOrg,6)
    StrAng = toString(PrAng):replace("[",""):replace("]","")
    StrOrg = toString(PrOrg):replace("[",""):replace("]","")
    StrIns = ""
    if(PrAng:pitch() == 0 && PrAng:yaw() == 0 && PrAng:roll() == 0){ StrAng = "" }
    if(PrOrg:x()     == 0 && PrOrg:y()   == 0 && PrOrg:z()    == 0){ StrOrg = "" }
    StrCls = entity():isConstrainedTo(1):type()
    if(StrCls == "prop_physics"){ StrCls = "" }

    StrPnt = "#"

    if(PrMode == "DSV")
    {
        StrIns = "TRACKASSEMBLY_PIECES"+
            "\t"+PrHash+
            "\t"+"\""+PrType+"\""+
            "\t"+"\""+PrName+"\""+
            "\t"+toString(floor(abs(PrPID)))+
            "\t"+"\""+StrPnt+"\""+
            "\t"+"\""+StrOrg+"\""+
            "\t"+"\""+StrAng+"\""+
            "\t"+"\""+StrCls+"\""
    }
    elseif(PrMode == "LUA")
    {
        StrIns = "  asmlib.InsertRecord({"+
            "\""+PrHash+"\""+", "+
            "\""+PrType+"\""+", "+
            "\""+PrName+"\""+", "+
            toString(floor(abs(PrPID)))+", "+
            "\""+StrPnt+"\""+", "+
            "\""+StrOrg+"\""+", "+
            "\""+StrAng+"\""+", "+
            "\""+StrCls+"\""+", "
            "})"
    }
    print(_HUD_PRINTTALK,Ins)
}

if(first() || dupefinished())
{
    # Chip based stuff
    runOnTick(1)
    Chip = entity()

    # Piece type that you are using. It is mandatory
    # It is usually derived from the addon mame
    # that you are exporting
    PieceType = "AlexCookie's 2ft Track Pack"

    # Export mode. This can be /DSV/ or /INS/
    PieceMode = "INS"

    # What segment type are we processing
    # road     --> Roads, like the PHX roads or Stephentechno
    # monorail --> Monorail track beams like PHX monorail
    # general  --> The two beam tracks segmentnts that we all love and joy
    TypeSegment = "general"

    # Piece name that you are using. This is actually
    # how the track piece will be called in the TA panel
    # Put a hastag to be autogenerated from the model on import
    PieceName = "#"

    # Point ID to be exported
    PointID = 1

    # This is automatically managed by the point ID selected
    # Set the coefficient before the sign() to adjust the process speed
    # The fighed the number the less iteration are made
    DX = 0.4
    DY = 0.4

    # Track piece width and height
    # The bigger the numbers the more cross section your track piece has
    # The width of the rail. It has to wrap the rail on width
    PieceW = 100
    # The height of the rail. It has to wrap the rail on height
    PieceH = 20
    # This tells the algorithm how deep should it search for rail surface
    PieceD = 5
    # This is an additional inset for the traces will use to hit the rail hull
    PieceI = 0.001
    # This shows how deep the first trace finds stuff usually less than PieceD
    PieceF = 0

    # If this entity is not traced the process will not start
    # This is our track oiece that we are generating the point for
    Ranger = rangerOffset(PieceD,Chip:pos(),-Chip:forward())

    # Make sure that all the parameters are correct
    PieceW = abs(PieceW)
    PieceH = abs(PieceH)
    PieceD = abs(PieceD)
    PieceI = abs(PieceI)
    PieceF = abs(PieceF)
    DX     = abs(DX)
    DY     = abs(DY)

    # Make sure we hit someting otherwise it has no point of doing this
    RangerHit = Ranger:hit()
    if(RangerHit)
    {
      Rail = Ranger:entity()
      PieceF = Ranger:distance()
    }else{
      Rail = noentity()
      PieceF = 0
    }

    # Formula for defining the inset pint generation
    InsDistance = PieceF + PieceI

    # Holograms to display the stuff
    U = Chip:up()
    R = Chip:right()
    F = Chip:forward()
    P = Chip:pos()
    A = Chip:angles()
    holoPos(1,PosL) holoColor(1,vec(0,255,  0)) holoAng(1,F:toAngle( R)) holoModel(1,"cone")
    holoPos(2,PosR) holoColor(2,vec(255,0,255)) holoAng(2,F:toAngle(-R)) holoModel(2,"cone")
    holoPos(3,PosU) holoColor(3,vec(255,0,255)) holoAng(3,F:toAngle(-U)) holoModel(3,"cone")
    holoPos(4,PosD) holoColor(4,vec(255,0,255)) holoAng(4,F:toAngle( U)) holoModel(4,"cone")
    holoPos(5,PosU) holoColor(5,vec(255,0,255)) holoAng(5,F:toAngle(-U)) holoModel(5,"cone")
    holoPos(6,PosD) holoColor(6,vec(255,0,255)) holoAng(6,F:toAngle( U)) holoModel(6,"cone")
    ArrXU = array(0,0,0)
    ArrXD = array(0,0,0)
    ArrYL = array(0,0,0)
    ArrYR = array(0,0,0)
    ArrM  = array(0,0,0)
    X = -PieceW
    Y = -PieceH
}

if(PieceF != 0)
{
  Chip:setColor(0,255,0,255)
  if(X < PieceW)
  {
    getTrace(ArrXU,-U, F, P - X * R + PieceH * U - InsDistance * F, 2 * PieceH, 2) # Up
    getTrace(ArrXD, U, F, P - X * R - PieceH * U - InsDistance * F, 2 * PieceH, 3) # Down
    getTrace(ArrM ,-F, U, P - X * R                       ,     PieceF, 4) # Middle
    X = X + DX
  }
  if(X < PieceW)
  {
    getTrace(ArrYL, -R, U, P - Y * U + PieceH * R - InsDistance * F, 2 * PieceW, 5) # Left
    getTrace(ArrYR,  R, U, P - Y * U - PieceH * R - InsDistance * F, 2 * PieceW, 6) # Right
    Y = Y + DY
  }
  if(X >= PieceW && Y >= PieceH)
  {
    if(TypeSegment == "general")
    {
      MZ = PieceI
      MX = ArrYL[2,number] + (2 * PieceW - ArrYL[2,number] - ArrYR[2,number]) / 2
      MY = ArrXU[2,number] + (ArrXU[3,number] - ArrXU[2,number]) / 2
      Pos = P - PieceW * R + PieceH * U
      Pos = Pos + MZ * F
      Pos = Pos + MX * R
      Pos = Pos - MY * U
      Org = Rail:toLocalAxis(Pos - Rail:pos())
      Ang = Rail:toLocal((F):toAngle(U))
    }
    printPoint(PieceType, PieceName, PieceMode, Rail:model(), PointID, Org, Ang)
    Chip:setColor(255,255,255,255)
  }
}
else
{
  Chip:setColor(255,0,0,255)
}






